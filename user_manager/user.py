import random
from user_manager.yargy_ner import (yargy_get_channel, yargy_smart_home,
                                    name_extractor, yargy_get_genre)
from helpers.search_movie import find_movie
from use_cases import caller


class User:
    def __init__(
            self,
            user_id: str,
            name: str=None,
            last_name: str=None
    ):
        self.user_id = user_id
        self.name = name
        self.last_name = last_name
        self.auth_code = str(random.randint(1000, 9999))
        self.auth_ok = False
        self.balance = random.randint(-300, 1000)

        # Move it
        self.available_channels = [
            '–ü–µ—Ä–≤—ã–π',
            '–†–æ—Å—Å–∏—è 24',
            '–¢–í–¶',
            '–ù–¢–í',
            '–¢–ù–¢',
            '–°–¢–°',
            '–ö—É–ª—å—Ç—É—Ä–∞',
            '–î–æ–∂–¥—å',
            '–†–µ–Ω–¢–í'
        ]
        self.available_genres = [
            '–Ω–æ–≤–æ—Å—Ç–∏',
            '–Ω–æ–≤–æ—Å—Ç–Ω–æ–π',
            '—Ñ–∏–ª—å–º—ã',
            '–∫–æ–º–µ–¥–∏–π–Ω—ã–π',
            '–∫—É–ª—å—Ç—É—Ä–∞',
            '–º—É–ª—å—Ç–∏–∫–∏',
            '–º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã',
            '–ø–æ–ª–∏—Ç–∏–∫–∞',
            '–ø—Ä–∏—Ä–æ–¥–∞',
        ]
        self.available_movie_genres = [
            '—É–∂–∞—Å—ã',
            '—É–∂–∞—Å—Ç–∏–∫–∏',
            '–º–µ–ª–æ–¥—Ä–∞–º–∞',
            '–º–µ–ª–æ–¥—Ä–∞–º—É',
            '–∫–æ–º–µ–¥–∏—è',
            '–∫–æ–º–µ–¥–∏—é',
            '–±–æ–µ–≤–∏–∫',
            '—Ç—Ä–∏–ª–ª–µ—Ä',
            '–º—É–ª—å—Ç–∏–∫',
            '–º—É–ª—å—Ç—Ñ–∏–ª—å–º'
        ]

        self.available_movies = [
            '–§–æ—Ä—Å–∞–∂',
            '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä',
            '–ë–æ–ª—å—à–∞—è –∏–≥—Ä–∞ 2017',
            '–°—Ç—Ä–∞–∂–∏ –ì–∞–ª–∞–∫—Ç–∏–∫–∏ 2',
            '–°—Ç—Ä–∞–∂–∏ –ì–∞–ª–∞–∫—Ç–∏–∫–∏',
            '–ë–æ–ª—å—à–∞—è –∏–≥—Ä–∞',
            '–ü–∏—Ä–∞—Ç—ã –∫–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è',
        ]

        self.available_series_genre = [
            '—É–∂–∞—Å—ã',
            '—É–∂–∞—Å—Ç–∏–∫–∏',
            '–º–µ–ª–æ–¥—Ä–∞–º–∞',
            '–º–µ–ª–æ–¥—Ä–∞–º—É',
            '–∫–æ–º–µ–¥–∏—è',
            '–∫–æ–º–µ–¥–∏–π–Ω—ã–π',
            '–≤–æ–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã',
            '–≤–æ–µ–Ω–Ω—ã–π',
            '–º—É–ª—å—Ç–∏–∫',
            '–º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª',
            '–¢–í-—à–æ—É'
        ]

        self.available_series = [
            '–î—Ä—É–∑—å—è',
            '–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤',
            '–ú–∏—Ä –¥–∏–∫–æ–≥–æ –∑–∞–ø–∞–¥–∞',
            '–ì–æ—Ç—ç–º',
            '–ß–µ—Ä–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ'
        ]

        self.smart_home_status = {
            '–í–∞–Ω–Ω–∞—è': {
                '–ö–∞–º–µ—Ä–∞': False,
                '–°–≤–µ—Ç': False,
                '–†–æ–∑–µ—Ç–∫–∞': False,
            },
            '–ì–æ—Å—Ç–µ–≤–∞—è': {
                '–ö–∞–º–µ—Ä–∞': False,
                '–°–≤–µ—Ç': False,
                '–†–æ–∑–µ—Ç–∫–∞': False,
            },
            '–ö–æ—Ä—Ä–∏–¥–æ—Ä': {
                '–ö–∞–º–µ—Ä–∞': False,
                '–°–≤–µ—Ç': False,
                '–†–æ–∑–µ—Ç–∫–∞': False,
            },
            '–ö—É—Ö–Ω—è': {
                '–ö–∞–º–µ—Ä–∞': False,
                '–°–≤–µ—Ç': False,
                '–†–æ–∑–µ—Ç–∫–∞': False,
            },
            '–°–ø–∞–ª—å–Ω—è': {
                '–ö–∞–º–µ—Ä–∞': False,
                '–°–≤–µ—Ç': False,
                '–†–æ–∑–µ—Ç–∫–∞': False,
            },
            '–•–æ–ª–ª': {
                '–ö–∞–º–µ—Ä–∞': False,
                '–°–≤–µ—Ç': False,
                '–†–æ–∑–µ—Ç–∫–∞': False,
            },
        }

        self.iptv_section = ''

        self.caller = caller.Caller()

    def __repr__(self):
        return '<{}.{}> {} id {user_id} {name} {last_name}'.format(
            self.__module__, type(self).__name__, type(self).__name__,
            user_id=self.user_id, name=self.name, last_name=self.last_name
        )

    def enter_auth_code(self, code):
        if code == self.auth_code:
            self.auth_ok = True
        return self.auth_ok

    def gen_auth_code(self):
        self.auth_ok = False
        self.auth_code = str(random.randint(1000, 9999))
        self.balance = random.randint(-300, 1000)

    def get_balance(self, message, answer_params):
        if self.auth_ok:
            if self.balance >= 0:
                return '–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: {} —Ä—É–±–ª–µ–π'.format(self.balance)
            else:
                return '–ü–æ –≤–∞—à–µ–º—É —Å—á–µ—Ç—É –∏–º–µ–µ—Ç—Å—è –∑–∞–¥–æ–ª–∂–Ω–æ—Å—Ç—å: {} ' \
                       '—Ä—É–±–ª–µ–π'.format(self.balance)
        else:
            return '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å. ' \
                   '–î–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth'

    def get_channels(self, message, answer_params):
        res = '–î–æ—Å—Ç—É–ø–Ω—ã –∫–∞–Ω–∞–ª—ã:\n'
        for ch in self.available_channels:
            res += '- ' + ch + '\n'
        return res

    def get_genre(self, message, answer_params):
        for genre in self.available_genres:
            if genre.lower() in message.lower():
                return '[–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∂–∞–Ω—Ä {}]'.format(genre)
        return '–ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'

    def switch_to_channel(self, message, answer_params):
        return '–í–∫–ª—é—á–∞–µ—Ç—Å—è –∫–∞–Ω–∞–ª {}'.format(yargy_get_channel(message))
        # for channel in self.available_channels:
        #     if channel.lower() in message.lower():
        #         return '[–í–∫–ª—é—á–∞–µ—Ç—Å—è –∫–∞–Ω–∞–ª {}]'.format(channel)
        # return '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'

    def what_to_watch(self, message, answer_params):
        answ = ''
        some_answ = False
        if len(self.iptv_section):
            answ = '–ò—â–µ–º –≤ —Ä–∞–∑–¥–µ–ª–µ {}\n'.format(self.iptv_section)
        names = name_extractor(message)
        if len(names):
            answ += '–ò—â–µ–º –ø–æ –∞–∫—Ç–µ—Ä–∞–º/—Ä–µ–∂–∏—Å—Å–µ—Ä–∞–º: '
            for n in [v['full'] for v in names]:
                answ += n + ', '
            answ = answ[:-2] + '\n'
            some_answ = True
        genres = yargy_get_genre(message)
        if len(genres):
            answ += '–ò—â–µ–º –ø–æ –∂–∞–Ω—Ä–∞–º: '
            for g in genres:
                answ += g + ', '
            answ = answ[:-2] + '\n'
            some_answ = True
        if some_answ:
            search_results = find_movie(genres, names)
            if len(search_results):
                answ = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n'
                for r in search_results:
                    answ += r + '\n'
                return answ
            return answ
        return answ + '–ò—â–µ–º –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{}"'.format(message)

    def get_movie_genre(self, message, answer_params):
        for genre in self.available_movie_genres:
            if genre.lower() in message.lower():
                return '[–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∂–∞–Ω—Ä {}]'.format(genre)
        return '–ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'

    def switch_to_movie(self, message, answer_params):
        for movie in self.available_movies:
            if movie.lower() in message.lower():
                return '[–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ñ–∏–ª—å–º {}]'.format(movie)
        return '–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω'

    def get_series_genre(self, message, answer_params):
        for genre in self.available_series_genre:
            if genre.lower() in message.lower():
                return '[–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∂–∞–Ω—Ä {}]'.format(genre)
        return '–ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'

    def switch_to_series(self, message, answer_params):
        for series in self.available_series:
            if series.lower() in message.lower():
                return '[–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–µ—Ä–∏–∞–ª {}]'.format(series)
        return '–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'

    def smart_home(self, message, answer_params):
        actions = yargy_smart_home(message)
        res = ''
        for action in actions:
            res += '–ö–æ–º–∞–Ω–¥–∞: [{}]\n–û–±—ä–µ–∫—Ç: [{}]\n–ú–µ—Å—Ç–æ: [{}]\n'.format(
                    action['–î–µ–π—Å—Ç–≤–∏–µ'], action['–û–±—ä–µ–∫—Ç'], action['–ú–µ—Å—Ç–æ']
                )
            obj = None
            if action['–û–±—ä–µ–∫—Ç'] in ['—Å–≤–µ—Ç', '–ª–∞–º–ø–æ—á–∫–∞']:
                obj = '–°–≤–µ—Ç'
            elif action['–û–±—ä–µ–∫—Ç'] in ['–∫–∞–º–µ—Ä–∞', '–≤–∏–¥–µ–æ–∫–∞–º–µ—Ä–∞']:
                obj = '–ö–∞–º–µ—Ä–∞'
            elif action['–û–±—ä–µ–∫—Ç'] in ['—Ä–æ–∑–µ—Ç–∫–∞']:
                obj = '–†–æ–∑–µ—Ç–∫–∞'

            place = None
            if action['–ú–µ—Å—Ç–æ'] in ['–≤–∞–Ω–Ω–∞', '–≤–∞–Ω–Ω–∞—è']:
                place = '–í–∞–Ω–Ω–∞—è'
            elif action['–ú–µ—Å—Ç–æ'] in ['–≥–æ—Å—Ç–µ–≤']:
                place = '–ì–æ—Å—Ç–µ–≤–∞—è'
            elif action['–ú–µ—Å—Ç–æ'] in ['–∫–æ—Ä–∏–¥–æ—Ä']:
                place = '–ö–æ—Ä—Ä–∏–¥–æ—Ä'
            elif action['–ú–µ—Å—Ç–æ'] in ['–∫—É—Ö–Ω—è']:
                place = '–ö—É—Ö–Ω—è'
            elif action['–ú–µ—Å—Ç–æ'] in ['—Å–ø–∞–ª—å–Ω—è']:
                place = '–°–ø–∞–ª—å–Ω—è'
            elif action['–ú–µ—Å—Ç–æ'] in ['—Ö–æ–ª–ª']:
                place = '–•–æ–ª–ª'

            act = None
            if action['–î–µ–π—Å—Ç–≤–∏–µ'] in ['–≤—ã–∫–ª—é—á–∏—Ç—å', '–æ—Ç–∫–ª—é—á–∏—Ç—å']:
                act = False
            elif action['–î–µ–π—Å—Ç–≤–∏–µ'] in ['–≤–∫–ª—é—á–∏—Ç—å']:
                act = True

            if obj is not None and place is not None and act is not None:
                self.smart_home_status[place][obj] = act

        for place in self.smart_home_status:
            state = ''
            if self.smart_home_status[place]['–ö–∞–º–µ—Ä–∞']:
                state += 'üé•'
            if self.smart_home_status[place]['–°–≤–µ—Ç']:
                state += 'üí°'
            if self.smart_home_status[place]['–†–æ–∑–µ—Ç–∫–∞']:
                state += 'üîå'
            if state != '':
                res += '\n{}: {}'.format(place, state)
        return res

    def open_tv(self, message, answer_params):
        self.iptv_section = '–¢–í'
        return '[–æ—Ç–∫—Ä—ã–ª—Å—è —Ä–∞–∑–¥–µ–ª –¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ]'

    def open_series(self, message, answer_params):
        self.iptv_section = '–°–µ—Ä–∏–∞–ª—ã'
        return '[–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª –°–µ—Ä–∏–∞–ª—ã]'

    def open_movies(self, message, answer_params):
        self.iptv_section = '–§–∏–ª—å–º—ã'
        return '[–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª –§–∏–ª—å–º—ã]'

    def open_main(self, message, answer_params):
        self.iptv_section = ''
        return '[–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞]'
